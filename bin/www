#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('newBlog:server');
var http2 = require('spdy');
var proxy = require('../proxy');
var config = require("../config");
var http = require('http');
var express = require("express");
proxy(config.httpsConfig, 8443);
var redirectApp = express();
redirectApp.use('*', function (req, res) {
    return res.redirect(['https://', req.hostname, req.originalUrl].join(''));
});
http.createServer(redirectApp).listen(80);
var server = http2.createServer(config.httpsConfig, app);
server.listen(443, function (err) {
    if (err) {
        console.log(err);
    }
});
server.on('error', onError);
server.on('listening', onListening);


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
